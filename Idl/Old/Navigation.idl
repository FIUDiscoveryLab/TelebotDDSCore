// Includes

module aeondds 
{
	module navigation
	{
		const long MAX_COURSE_ID_LENGTH = 32;
		const long MAX_WAYPOINTS = 1000;
	
		struct TWaypoint
		{
  			double longitude;
  			double latitude;
  			double alt_m;
  			double heading_rads;
  			double acceptanceRadius_m;
		};
		
		struct TWaypointCourse
		{
			string< MAX_COURSE_ID_LENGTH> courseId;
			long currentWaypoint;
			sequence<TWaypoint, MAX_WAYPOINTS> waypoints;
		};
	};
};

 
module aeondds 
{
	module cmdrnav
	{
		enum EModeType 
		{
			AUTO,
			EMERGENCYSOFT,
			EMERGENCYHARD,
			POSITIONHOLD
		};
		
		// Message for requesting the navigator to change modes
		struct TModeChange
		{
			EModeType modeType;
		};
	
		// Upload a waypoint course to the navigator
		struct TRegisterCourse
		{
			long courseId;
			navigation::TWaypointCourse course;
		};
		
		// Select a course to operate on and a starting index
		struct TSetCourse
		{
			long courseId;
			long startIndex;
		};
		
		
		// Reports -------------------
		enum EReportType
		{
			COURSECOMPLETION,
			WAYPOINTREACHED,
			MODESHIFT,
			SYSTEMFAILURE,
			STATUSRESPONSE			
		};
		
		enum EStatus
		{
			FAILURE,
			SUCCESS
		};
		
		enum ENavigatorSubsystems
		{
			AUTOPILOT,
			CONTROLLER,
			HARDWARE
		};
		
		struct TReportCourseCompletion
		{
			EStatus status;
			long courseId;
		};
		
		struct TReportWaypointReached
		{
			long courseId;
			long waypointIndex;
		};
		
		struct TReportModeShift
		{
			EModeType modeType;
		};
		
		struct TReportSystemFailure
		{
			ENavigatorSubsystems subsystem;
			boolean isRecoverable;
		};
		
		struct TReportStatusResponse
		{
			EStatus statusResponse;
		};
		
		// Union that condenses all reports to a single type
		union TReportUnion switch ( EReportType )
		{
			case COURSECOMPLETION:
				TReportCourseCompletion courseCompletionReport;
			case WAYPOINTREACHED:
				TReportWaypointReached waypointReachedReport;
			case MODESHIFT:
				TReportModeShift modeShiftReport;
			case SYSTEMFAILURE:
				TReportSystemFailure systemFailureReport;
			case STATUSRESPONSE:
				TReportStatusResponse statusResponseReport;	
		};
		
		struct TReport
		{
			TReportUnion report;
		};
	};
};
