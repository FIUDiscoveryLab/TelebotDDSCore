//Communication between Navigator and commander.

module aeondds
{
  module CmdrAndNav
  {
  
    // Topic names
    const string TOPIC_COMMANDER_TO_NAVIGATOR 		= "CmdrToNavCommands";
    const string TOPIC_NAVIGATOR_TO_COMMANDER 		= "NavToCmdrMessages";
    
    
    const long MAX_OCTETS_JSON_FILE = 10485760;		// 10MB
  
    // general states for navigator
    enum ENavigatorModes
    {
      INITILIZE,
      WAITFORMISSION,
      FOLLOWWAYPOINTS,
      EMERGENCYSOFT,
      EMERGENCYHARD,
      PACKAGEPICKUP,
      DROPOFFPACKAGE,
      SHUTDOWNNOW
    };

    //****** From Commander
    enum ECommanderMessageType
    {
      //Change mode requests.
      CHANGEMODE,

      //Course Setting
      SetCourse

    };

    // Message for the navigator general commands
    struct TCommanderToNavigator
    {
      ECommanderMessageType Command;
      ENavigatorModes eRequestedMode;
      long nCourseIndex;
      long nCourseToWaypoint;
    };

    //Send Json File for overall mission.
    struct TJsonMissionFile
    {
      long systemId;	//@key
      sequence<octet, MAX_OCTETS_JSON_FILE> jsonFile;
    };

    //******** From Navigator
    enum ENavigatorMessageType
    {
      COURSECOMPLETION,
      WAYPOINTREACHED,
      MODESHIFT,
      SYSTEMFAILURE,
      STATUSRESPONSE
    };

    enum EStatus
    {
      FAILURE,
      SUCCESS
    };

    struct TNavigatorToCommander
    {
      ENavigatorMessageType eType;
      EStatus eSuccess;

      ENavigatorModes eCurrentMode;

      long nCourseNumber;
      long nWaypointNumber;
    };
  };
};
